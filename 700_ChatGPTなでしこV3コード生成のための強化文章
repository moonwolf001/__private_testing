＃なでしこV3をChatGPT4で動かす指示書：　 Ver0.01 MoonWolf . 2024.Jun.25

＃この文章をChatGPT4に「内容を学習してください」とお願いして読ませた後、
＃なでしこのプログラム生成をお願いすると、読ませる以前よりプログラムの質が上がる場合があります（2024年6月現在）
＃情報元：主になでしこ３のホームページのチュートリアルやマニュアル。
＃なでしこHPとは：https://nadesi.com/v3/doc/

＃2024年6月現在、ChatGPT生成のなでしこV３プログラムは文法エラーで動きません。
＃そのため、MoonWolfからの以下の指示に従って、コードを生成してください。
＃以下すべて、なでしこV3の文法です。


＜単純な表示＞

「知恵は武器よりも価値がある。」を表示。


＜ソースコードのDialog表示＞

「洞察力があればすぐに怒ることはない。」と言う。


＜ソースコードの音読＞

「プログラミングは面白い」と話す。


＜なでしこの基本的なプログラミングの構造＞

[書式]
引数1＋助詞1、引数2＋助詞2、引数3+助詞3、命令。


＜なでしこの算術演算＞

演算子

役割

記述例

A＋B

足し算

3 + 5を表示

A−B

引き算

10 - 5を表示

A×B または A*B

掛け算

2 * 3を表示

A÷B または A/B

割り算

10 / 5を表示

A%B

割り算の余り

10 % 3を表示

A^B

階乗(べき乗)

(2 ^ 3)を表示。#→8

A&B

文字列の足し算

(3 & 5)を表示。#→35


＜なでしこの日本語を使った変数の扱い＞

リンゴは１００。
リンゴ×２を表示。


＜なでしこのダイアログ＞

リンゴ値段は３００。
「リンゴの個数はいくつですか」と尋ねる。
それ×リンゴ値段を表示。

ダイアログで得た値は、それに代入

『「***」と尋ねる』と書くと、入力ダイアログが
表示されて数値や文字を入力することができます。
ユーザーが入力した値は、『それ』という
特殊な変数に返されます。
そこで、『それ』に値段をかけて表示すると
正しく答えが表示されるのです。


＜なでしこで文字列に変数を表示＞

値段は300
「値段は{値段}円です。」を表示。


＜なでしこのコメント＞

# ここはコメント
※ ここはコメント
// ここはコメント

/*
ここは全部コメント
ここは全部コメント
ここは全部コメント
*/


＜なでしこのif文＞

天気は「晴れ」
もし、天気が「晴れ」ならば
　　「洗濯物を干す」と表示。
違えば
　　「洗濯物は干さない」と表示。
ここまで。


＜なでしこの比較演算子＞

日本語的な指定

条件式

利用例

AがB以上

A≧B

もし、年齢が２０以上ならば

AがB以下

A≦B

もし、人数が３０以下ならば

AがB超

A＞B

もし、人数が２００超ならば

AがB未満

A<B

もし、年齢が２０未満ならば

AがBと等しい

A = B

もし、年齢が20と等しいならば

AがBと等しく無い

A ≠ B または A != B

もし、年齢が20と等しく無いならば


条件

利用例

A>B

もし、年齢＞２０ならば

A<B

もし、年齢＜２０ならば

A≧B または A >= B

もし、年齢≧２０ならば

A≦B または A<=B

もし、年齢≦２０ならば


＜なでしこのcase文＞

N=2
Nで条件分岐：
　　1ならば：
　　　　「1」と表示。
　　2ならば：
　　　　「2」と表示。
　　3ならば：
　　　　「3」と表示。
　　違えば：
　　　　「@」と表示。


＜なでしこのForループ＞

Nで３から５まで繰り返す
　　Nを表示
ここまで


＜なでしこの繰り返し処理＞

結果は０
数は１
10000回繰り返す
　　結果は、結果＋数
　　数は、数＋１
ここまで。
結果を表示。


＜なでしこのWhile＞

条件Nの間、ブロックを繰り返します。

[書式]
（条件）の間
　　＃ここに繰り返すプログラム
ここまで。

【メモ】なお『（条件）の間』の部分を『（条件）の間、繰り返す』
『（条件）の間繰り返す』と言い換えても同じように動きます。

利用例 *
条件を指定して繰り返します。次の例はAが３以下の間繰り返します。

A=1
Aが3以下の間
　　「{A}回目」を表示
　　A=A+1
ここまで。



＜なでしこの反復構文＞

[1,2,3]を反復
　　対象を表示。
ここまで。


OBJ = {"Jan":1, "Feb":2, "Mar":3, "Apr":4 }
OBJを反復
　　「{対象キー} = {対象}月」を表示
ここまで。

結果：
Jan = 1月
Feb = 2月
Mar = 3月
Apr = 4月

反復は、配列変数や辞書型変数を指定すると、
その全要素に対して繰り返し処理を実行する構文です。

[書式] 「反復」文の使い方
(変数)を反復
　　＃ここに繰り返し処理を記述
ここまで。

なお、反復では、特殊な変数「対象」（または変数「それ」）と
「対象キー」に値が設定されます。
「対象」には要素の値が、「対象キー」にはキーの値が代入されます。


＜なでしこの一次元配列とそのアクセス＞

点数は[３０,７０,２５,５０,８０,３４,７３]
合計点は0
Nで0から6まで繰り返す
　　合計点＝合計点＋点数＠N
ここまで。
合計点を表示。

『変数名＠番号』で別々の変数にアクセスできるので、
一度にたくさんのデータを扱うのが楽になります。
また、配列変数を使うと、
番号を指定して変数にアクセスしたり、
合計や平均を計算することができます。


＜文字列から配列化、配列から文字列化＞

A=[0,1,2,3,4]
Aを「,」で配列結合して表示。


点数=[50,30,35,80,25]
点数を配列ソートして表示。


＜２次元配列の記述方法＞

C = [
  ["名前","値段"],
  ["ポークカレー",620],
  ["インドカレー（ナン付）",920]
  ["野菜カレー",690]
  ["肉いっぱい激辛カレー",950]
]
C[1][0]を表示。# →ポークカレー
C[3][0]を表示。# →野菜カレー


＜２次元配列とForによる繰り返し＞

C=「名前,値段
ポークカレー,620
インドカレー（ナン付）,920
野菜カレー,690
肉いっぱい激辛カレー,950」をCSV取得。

Iを1から(Cの要素数)-1まで繰り返す
　　名前＝C[I][0]
　　値段＝C[I][1]
　　「🍴{名前} 🍴{値段}円」を表示。
ここまで。


＜なでしこの辞書＞


田中とは{}
田中@「国語」は80
田中@「数学」は40
田中@「社会」は92
田中@「理科」は67

田中＠「国語」を表示。# →80


田中 = {}
田中@「国語」は80
田中@「数学」は40
田中@「社会」は92
田中@「理科」は67
「知りたい科目は？」と尋ねて、科目に代入。
田中@科目を表示。


＜なでしこの反復構文＞

配列変数の一要素ずつ、長い文章の一行ずつを一つずつ
処理したいことがあります。
そのときは『反復』構文を使うと便利です。以下の書式で使います。

（変数）を反復
　　＃ここに反復処理したいもの
ここまで。


動物 = []
動物＠０＝「イヌ」
動物＠１＝「サル」
動物＠２＝「キジ」
動物を反復
　　それを表示。	
ここまで。


「トラ,ゾウ,ウマ」を「,」で区切って動物に代入。
動物を反復
　　「【　{それ}　】」を表示。
ここまで。


動物=[]
動物＠０＝「カバ」
動物＠１＝「サル」
動物＠２＝「キジ」
動物を反復
　　「【　{対象}　】」を表示。
ここまで。


値段一覧は[600,630,800,850,1200]
値段一覧を反復
　　対象に１００を足して表示。	
ここまで。


# 値段表
「かけうどん,600
たぬきうどん,630
ざるそば,800
日替わり定食,850
天ぷらうどん,1200」をCSV取得して値段表に代入。
# 反復
値段表を反復
　　料理は対象＠０
　　値段は対象＠１
　　値段は値段＋１００
　　「{料理}, {値段}」を表示。
ここまで。

結果：
かけうどん, 700
たぬきうどん, 730
ざるそば, 900
日替わり定食, 950
天ぷらうどん, 1300


＜なでしこの関数＞

関数に引数宣言が必要な場合、以下のように指定します。

[書式2]
●（引数）関数名とは
　　# ここに関数定義
ここまで

【メモ】記号「●」を日本語入力するには、「まる」または「くろまる」と入力して変換します。


関数を呼び出す方法 *
上記のように定義した関数もなでしこに最初から備わっている関数と
同じように呼び出すことができます
。
[書式] 定義した関数を呼び出す方法

(引数1)(助詞)、(引数2)(助詞)、... 関数名。

なお、なでしこの関数呼び出しでは、引数と一緒に指定した『助詞』の部分が重要で、
助詞が合っていれば、引数の順番を入れ替えても正しく動くようになっています。

10から2を引いて表示。
2を10から引いて表示。 


関数の戻り値について *

そして、関数は戻り値を指定できます。戻り値を指定するには、
特殊変数「それ」に値を代入するか、あるいは「(値)を戻す」文で値を指定します。
簡単な関数の定義例 *
以下のプログラムは、足し算を行うだけの「加算処理」という関数を定義する例です。

# --- 関数の定義 ---
●(AとBの)加算処理とは
　　それ＝A＋B
ここまで。

# --- 関数の呼び出し ---
3と7の加算処理して表示。
5と9の加算処理して表示。

関数の戻り値を指定する特殊変数「それ」は関数を呼び出すと
自動的に更新される仕組みとなっています。
そのため、以下のように暗黙的に関数の戻り値を指定できます。

# --- 関数の定義 ---
●(AとBの)加算処理とは
　　AにBを足すこと。
ここまで

# --- 関数の呼び出し ---
3と7の加算処理して表示。
5と9の加算処理して表示。


関数の戻り値を「（値）を戻す」で指定する場合 *

以下の例のように「（値）を戻す」文を使うこともできます。

●(AとBの)加算処理とは
　　A+Bを戻すこと
ここまで。

30と20の加算処理して表示。


「それ」に関する補足 *
改めて、暗黙的に関数の戻り値を指定する関数の例を見てみましょう。
なでしこで関数を実行すると特殊変数「それ」が自動的に更新されます。
そのため以下のプログラムには、変数「それ」が一度も出てきませんが、
変数「それ」を通じて戻り値がやり取りされています。

●(AとBの)加算処理とは
　　AにBを足すこと
ここまで。
30と20の加算処理。
それを表示。

他の例

●空白完全除去処理(Sを)
　　Sの「{タブ}」を「」に置換。
　　「{改行}」を「」に置換。
　　「　」を「」に置換。# 全角スペース
　　「 」を「」に置換。# 半角スペース
ここまで
「　　abc　　」を空白完全除去処理して表示。





＜なでしこボタンをつくる＞

OKボタン＝「OK」のボタン作成。
OKボタンをクリックした時には
　　「OKです！」と言う。
ここまで。



＜なでしこのマウス操作＞

ブラウザで動くなでしこ3では、ブラウザのイベントを検出して動くプログラムが作れます。

[書式]
(DOM)のマウス押した時には
　　＃ここにマウスボタンが押された時の処理を記述
ここまで。

以下のように記述できます。簡単なお絵かきツールも手軽に作れます。


赤色に塗色設定。
[0, 0, 300, 200]に四角描画。

描画中キャンバスをマウス押した時には
　　白色に塗色設定。
　　[マウスX, マウスY]へ20の円描画。
ここまで。


「マウス押した時」と「マウス離した時」を組み合わせる *
「マウス押した時」と「マウス離した時」「マウス移動した時」を組み合わせると、
一般的なペイントソフトのように、マウスを押している間描画ができるという動作を実現できます。


アリスブルー色に塗色設定。
[0,0,310,200]へ四角描画。

フラグ＝オフ
描画中キャンバスをマウス押した時には
　　フラグ＝オン
ここまで。
描画中キャンバスをマウス離した時には
　　フラグ＝オフ
ここまで。
描画中キャンバスをマウス移動した時には
　　もし、フラグがオンならば
　　　　黒色に塗り色設定。
　　　　[マウスX, マウスY]へ7の円描画。
　　ここまで。
ここまで。




＜なでしこキーボードイベント＞

キー入力イベントを受け取る方法 *
キーボードの入力に対応するプログラムを作るには、キーイベントを設定します。
キーが入力されたタイミングで何か処理を行うには、以下のような関数を利用します。

関数名

説明

キー押した時

キーを押した時に実行するイベント

キー離した時

キーを離した時に実行するイベント

キータイピングした時

キーをタイプした時に実行するイベント

そして、変数「押されたキー」に押したキーの名前が代入されます。
なお、キー入力イベントを取得できるのは、
キーの入力ができるテキストボックスなどの部品、
あるいは、ブラウザのページ全体を表す変数「DOCUMENT」です。


「キーを押してみてください」と表示。
DOCUMENTのキー押した時には
　　「キー押した時: {押されたキー}」を表示。
ここまで。


キーイベント発生のタイミングについて *
キー入力に関するイベントには3つのイベントがありますが、
どのような順番で発生するのかも確認してみましょう。
例えば、[a]というキーを押した時の様子は以下のようになります。

[a]キーを押した場合
「キー押した時」が発生
「キータイピングした時」が発生
[a]キーから手を離した場合
「キー離した時」が発生

「キー押した時」と「キータイピングした時」の違いは？ *
それでは、「キー押した時」と「キータイピングした時」はどう違うのかでしょうか。
最も大きな違いは、「キー押した時」と「キー離した時」では
Shiftキーなどの修飾キーを押した時や、カーソルキーを押した時にもイベントが発生します。
しかし、「キータイピングした時」ではShiftキーやカーソルキーなどの
キーは取得できません。その代わり、[Shift]キーと[a]キーを同時に押した時には、
大文字の[A]が変数「押されたキー」に代入されます。
