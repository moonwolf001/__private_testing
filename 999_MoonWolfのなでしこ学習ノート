※ここでは、MoonWolfのなでしこプログラミンでの発見点を記録しておきます。

<< Special Thanks >>
てぃふと@うぇいくさんのゲームプログラム例の数々が、なでしこの知識ゼロの私にはとても参考になりました。 

【１】なでしこでの２Dゲームメインループの考え方（requestAnimationFrame（「画面更新時実行」）

２Dゲームを開発中に、星が関数で動くプログラムとマウスでクリックすると
弾が発射される視覚的エフェクトを別々に作ったものの、統合の際にうまくいかず、
メインルーチンを見直す必要性がある状態での発見。マウスをクリックすると無限ループにはまる。
なでしこを教育しながらChatGPT4を使いプログラム生成中。
ここで、ChatGPT4が他の方のプログラム例を参考に抜本的にことなるメインルーチンを示してきた。
MoonWolfは何がおきたのか分からないので、ChatGPT4に何を根拠にそのメインルーチンを生成したのか質問。
以下、その時の会話記録。



MoonWolf：

あなたがかつてのメインループを関数化したのは、私はわかるよ。
問題は、

# メインループの開始
描画中はオン
前回日時 = 「Date.now()」をJS実行
「メインループ」を画面更新時実行

これがどういう理屈でメインループ化するのか教えてくれないか？


ChatGPT4：

「メインループ」を画面更新時に実行する仕組みは、
ブラウザのリクエストアニメーションフレーム（requestAnimationFrame）メソッドを使ったものです。

リクエストアニメーションフレームの概念:

requestAnimationFrameはブラウザに「次の再描画フレームが準備できたら、
指定した関数を呼び出してほしい」と依頼するメソッドです。
これにより、指定した関数はブラウザの再描画サイクルと同期して実行されるため、
スムーズなアニメーションが実現できます。

メインループの設定:

初期化時に「メインループ」を画面更新時に実行するように設定します。
これは、ブラウザの再描画サイクルごとに「メインループ」が呼び出されることを意味します。

メインループ内での再リクエスト:

「メインループ」関数の最後に再度requestAnimationFrameを呼び出して
「メインループ」を再登録することで、次の再描画時にも「メインループ」が
実行されるようにします。これを繰り返すことで、継続的に「メインループ」が実行される、
つまり無限ループが実現されます。


実例：JavaScript＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
function mainLoop() {
  // 各種処理（アニメーションの更新、描画など）

  // 次のフレームの実行を予約
  requestAnimationFrame(mainLoop);
}

// メインループの開始
requestAnimationFrame(mainLoop);
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

実例：なでしこ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# 初期設定
描画中 = オン
前回日時 = 「Date.now()」をJS実行

# メインループ関数
●メインループとは
  # 現在の日時を取得
  現在日時 = 「Date.now()」をJS実行
  経過時間 = 現在日時 - 前回日時
  経過レート = 経過時間 / 20.0

  # 各種処理（進行処理、判定処理、描画処理）

  # 前回日時を更新
  前回日時 = 現在日時

  # 次のフレームの実行を予約
  もし、描画中ならば
    「メインループ」を画面更新時実行
  ここまで
ここまで

# メインループの開始
「メインループ」を画面更新時実行
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

まとめ
requestAnimationFrame（なでしこでは「画面更新時実行」）を使うことで、
ブラウザの再描画サイクルと同期したメインループを実現します。
これにより、滑らかなアニメーションや継続的な処理を行うことが可能になります。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

