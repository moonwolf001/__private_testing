MoonWolf：

2023年秋、アメリカ国家セキュリティー当局は、CとC++、このふたつの言語を名指しで危険視し安全な言語への移行の推奨を始めた。
CとC++言語により作成された実行ファイル、及びDLLファイルには、攻撃者からみると絶好の脆弱性を与えてしまう。
プログラムにひとつでもCとC++の実行ファイルやDLLファイルがあると、それを使うシステム、それにつながる機器にまで影響は及ぶ。
結果として、悪意のあるものにメモリーを操作され、システムの破壊、マルウェアの埋め込み、機密情報、個人情報の漏洩などが発生するなどの被害が予測される。

公式ドキュメント：National Cybersecurity Strategy from the White House
https://www.whitehouse.gov/wp-content/uploads/2023/03/National-Cybersecurity-Strategy-2023.pdf


ChatGPT4による概要：

The vulnerabilities associated with C and C++ have gained significant attention globally 
due to their inherent risks related to memory safety, such as buffer overflows and memory leaks. 
In the U.S., for example, the White House has urged developers to move away from these languages 
and adopt more secure, memory-safe alternatives like Rust, Go, or C# to mitigate risks related to cyberattacks. 
The primary concern is that C and C++ do not provide built-in safeguards to prevent unsafe memory access, 
which can be exploited by attackers, leading to significant security breaches.

However, despite these risks, many systems, particularly older government and infrastructure systems, 
continue to rely on C and C++, mainly due to the complexity and cost of migrating to newer languages. 
Even though regular updates and patches can mitigate some vulnerabilities, 
the underlying risks remain unless the software is rewritten in safer languages.

In Japan, though no specific government directive directly mirrors the U.S. stance, 
there is growing awareness around cybersecurity and software vulnerabilities, especially in light of global trends. 
The challenge for Japanese organizations, like many worldwide, 
is ensuring that security patches are regularly applied to mitigate vulnerabilities in C and C++-based systems​(
Snyk　
https://snyk.io/jp/blog/top-5-c-security-risks/
)​(
Tech Startups
https://techstartups.com/2024/02/28/white-house-urges-developers-to-move-away-from-c-c-yet-many-federal-agencies-still-run-on-65-year-old-cobol/
).

While it is not uncommon for older systems to rely on C and C++, the trend is 
moving towards modernizing these environments with memory-safe languages 
to reduce exposure to potential cyber threats. For developers working with HSP3 
or any system that utilizes C and C++-based DLLs, maintaining up-to-date security patches 
and considering safer programming practices are crucial steps.



ChatGPT4:

例え話: メモリーアドレスに関する情報漏洩

今回は、800番から805番までのメモリー領域に重要なユーザー情報が保存されている状況を考えてみましょう。
CやC++の脆弱性が原因で、この領域に不正なデータが書き込まれた場合、どのようなリスクが生じるのかを説明します。

800番から805番に保存されている情報
想像してみてください。このアドレス領域には、次のような機密データが含まれています：

800番：ユーザーID（例: 12345）
801番：パスワード（例: myPassword123）
802番：クレジットカード番号（例: 4242 4242 4242 4242）
803番：有効期限（例: 12/25）
804番：セキュリティコード（例: 987）
805番：住所（例: 東京都渋谷区）
このデータは、たとえばオンラインショッピングサイトや銀行のアプリケーションで、ユーザーがログインし、支払いを行うために必要な情報です。

CやC++の脆弱性によるリスク
CやC++では、プログラムが誤って他のメモリー領域にアクセスしてしまうリスクがあります。
つまり、プログラムが意図せず800番から805番のアドレスにある機密データを参照、変更、あるいは他のプログラムや外部の攻撃者に公開してしまう可能性があるのです。

具体的な不正な書き込みのシナリオ
外部の攻撃者がCやC++プログラムの脆弱性を見つけ、次のような不正なデータを書き込みます。

800番：攻撃者のID
801番：攻撃者が生成したパスワード
802番：攻撃者のクレジットカード番号
これにより、元々のユーザーのデータが上書きされ、攻撃者がシステムに侵入することが可能になります。
さらに、攻撃者はそのユーザーになりすまして、不正な購入や取引を行うことができ、ユーザーのクレジットカードで悪用される恐れがあります。

CやC++のプログラムが意図せず実行する理由
CやC++は、メモリー管理をプログラマーに任せる設計となっています。プログラムがメモリーを「ここからここまで使う」と指定するのですが、
誤って隣接するメモリー領域にもアクセスしてしまう場合があります。
この原因は、プログラムが使用するメモリーの量を正しく制限していなかったり、メモリー操作にエラーが含まれている場合です。

たとえば、CやC++プログラムが本来100番から200番のアドレスだけを使うつもりでも、
プログラムのバグや設計ミスで800番のメモリーにデータを書き込んでしまうことがあります。
プログラムは「他のメモリー領域にアクセスしてはいけない」という制約がないため、
800番から805番の機密データにアクセスしてしまい、結果として情報漏洩やデータ破損が起こります。

まとめ
CやC++は非常に強力なプログラミング言語ですが、メモリー管理の安全性をプログラマー自身に委ねる設計になっています。
そのため、バグや不正アクセスが発生した場合、意図しないメモリー領域にアクセスしてしまうことで、
機密情報が漏洩するリスクがあります。これが、CやC++の脆弱性と呼ばれる理由です。


MoonWolf:

あなたは以前、プログラマーにはミスがなくても、CとC++でコンパイルされたものは、メモリーへのポインター操作をする言語の成果物なので、
プログラムの完成度に関わらず、悪意のあるもにに、脆弱性を残すと説明していました。

ChatGPT4:

はい、その通りです。CやC++で書かれたプログラムには、ポインタ操作が非常に重要な要素として含まれています。
ポインタは、プログラムがメモリー上の特定の位置に直接アクセスし、データを読み書きするためのツールですが、
これによりメモリー操作が柔軟に行える反面、メモリーの安全性が保証されないことがよくあります。これがCやC++の本質的な脆弱性の原因です。

ポインタ操作と脆弱性の関係

CやC++では、プログラマーが意図したメモリー領域以外にもアクセスできる可能性があります。
つまり、意図せず他のプログラムやシステムの重要なデータ領域にアクセスしてしまうことがあり、これが脆弱性を生む要因です。
このため、プログラマーがどれほど慎重にコードを書いたとしても、ポインタ操作そのものがリスクを伴う設計であるため、脆弱性が生まれやすいのです。

プログラムの完成度に関わらず起こり得る問題

CやC++のプログラムは、正確に設計され、ミスなく実装されたとしても、攻撃者はこのポインタ操作の特性を利用して、
悪意のある操作を行うことができます。特に、プログラムが外部からデータを受け取る場合、
攻撃者が意図的に不正なデータを送り込むことで、システムを乗っ取ったり、他のデータにアクセスする手口が可能です。
これがバッファオーバーフロー攻撃やリモートコード実行攻撃といった形でよく見られます。

たとえば、次のような問題が発生する可能性があります。

バッファオーバーフロー: プログラムが指定されたメモリー領域よりも大きなデータを書き込もうとすると、
隣接するメモリーが上書きされ、システムに致命的な影響を与えることがあります。
これにより、攻撃者は悪意のあるコードをシステムに注入し実行することができます。

リモートコード実行: 

攻撃者がリモートから不正なデータを送り込み、ポインタ操作を通じて任意のコードを実行させることができます。
これにより、システムが完全に乗っ取られたり、情報が盗まれたりする可能性があります。

ポインタ操作の危険性

CやC++は非常に高性能なプログラミング言語であり、システムレベルのプログラミングや高速な計算処理においては強力なツールです。
しかし、メモリー管理をプログラマーが手動で行う必要があるため、メモリーの安全性が保証されないというリスクを常に伴います。

このため、セキュリティの観点からは、メモリー安全な言語（RustやGoなど）を使用することが推奨されています。
これらの言語は、プログラムがメモリーに不正にアクセスすることを防ぐ仕組みが組み込まれており、CやC++で一般的な脆弱性を回避することができます。

まとめ
CやC++で作られたプログラムは、たとえプログラマーにミスがなかったとしても、
ポインタ操作やメモリー管理に関連する特性から、脆弱性が残る可能性が高いです。
そのため、現代のセキュリティ対策としては、これらの脆弱性を回避できる言語に移行することが推奨されています。
