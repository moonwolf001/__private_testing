# MoonWolfなでしこチャレンジ　星の動き＋弾の動き　2024.6
# 当たり判定＋Score Version 0.03
# キャンパス 600x500  ※当たり判定、スコア、ヒットメッセージを追加

# 初期設定
黒色に塗色設定。
[0, 0, 600, 500]に四角描画。
描画中 = オン
BulletActivate = 0
クリックX = 0
クリックY = 0
弾半径 = 400 
弾回転角度 = 0
スコア = 0
当たり判定距離 = 30
ヒットフレーム = 0
ヒットX = 0
ヒットY = 0

# 各種定数の設定
5に線太設定
星半径 = 25
数学的X = -300
グローバル関数番号 = 1

# 変数の初期設定
前回日時 = 「Date.now()」をJS実行
クリック地点X = 0
クリック地点Y = 0

# X軸とY軸の描画関数
●軸描画とは
    白色に線色設定。
    # X軸
    [0, 250]から[600, 250]まで線描画。
    # X軸の矢印
    [590, 240]から[600, 250]まで線描画。
    [590, 260]から[600, 250]まで線描画。
    # Y軸
    [300, 0]から[300, 500]まで線描画。
    # Y軸の矢印
    [290, 10]から[300, 0]まで線描画。
    [310, 10]から[300, 0]まで線描画。
    # 軸のラベル
    「24px sans-serif」に描画フォント設定
    白色に塗り色設定
    [565, 275]に「X」を文字描画。
    [310, 30]に「Y」を文字描画。
    [275, 275]に「O」を文字描画。
ここまで

# 五芒星を描く関数
●(中心X, 中心Y, 半径)五芒星とは
    黄色に線色設定。
    頂点は[
        [中心X, 中心Y - 半径], # 1: 上
        [中心X + 半径 * SIN(PI * 72 / 180), 中心Y - 半径 * COS(PI * 72 / 180)], # 2: 右上
        [中心X + 半径 * COS(PI * 54 / 180), 中心Y + 半径 * SIN(PI * 54 / 180)], # 3: 右下
        [中心X - 半径 * COS(PI * 54 / 180), 中心Y + 半径 * SIN(PI * 54 / 180)], # 4: 左下
        [中心X - 半径 * SIN(PI * 72 / 180), 中心Y - 半径 * COS(PI * 72 / 180)] # 5: 左上
    ]
    [頂点[0][0], 頂点[0][1]]から[頂点[2][0], 頂点[2][1]]まで線描画。 # 1 -> 3
    [頂点[2][0], 頂点[2][1]]から[頂点[4][0], 頂点[4][1]]まで線描画。 # 3 -> 5
    [頂点[4][0], 頂点[4][1]]から[頂点[1][0], 頂点[1][1]]まで線描画。 # 5 -> 2
    [頂点[1][0], 頂点[1][1]]から[頂点[3][0], 頂点[3][1]]まで線描画。 # 2 -> 4
    [頂点[3][0], 頂点[3][1]]から[頂点[0][0], 頂点[0][1]]まで線描画。 # 4 -> 1
ここまで。

# 星のY座標を計算する関数の続き
●Y座標計算とは
    もし グローバル関数番号 = 1 ならば
        もし 数学的X ≠ 0 ならば
            Y = ROUND(3500 * 1 / 数学的X) * (-1)
        ここまで
    違えば もし グローバル関数番号 = 2 ならば
        Y = ABS(ROUND(0.3 * 数学的X + 30))
    違えば もし グローバル関数番号 = 3 ならば
        もし 数学的X ≠ 0 ならば
            Y = ROUND(3500 * 1 / 数学的X)
        ここまで
    違えば もし グローバル関数番号 = 4 ならば
        Y = ROUND(0.003 * 数学的X * 数学的X) * (-1)
    違えば もし グローバル関数番号 = 5 ならば
        Y = ROUND(0.007 * (数学的X - 50) * (数学的X - 50) - 150)
    違えば もし グローバル関数番号 = 6 ならば
        Y = ROUND(0.006 * (数学的X + 70) * (数学的X + 70) - 200) * (-1)
    違えば もし グローバル関数番号 = 7 ならば
        Y = ROUND(120 * SIN(数学的X * 0.05))
    違えば もし グローバル関数番号 = 8 ならば
        Y = ROUND(10 * SIN(数学的X * 0.0098) / COS(数学的X * 0.0098))
    違えば もし グローバル関数番号 = 9 ならば
        Y = ROUND(数学的X * SIN(数学的X * 0.05))
    違えば もし グローバル関数番号 = 10 ならば
        もし 数学的X ≠ 0 ならば
            Y = ROUND(5000 / 数学的X * SIN(数学的X * 0.05))
        ここまで
    ここまで
    Yを戻す
ここまで

# 星の動きを更新する関数
●星更新とは
    数学的Y = Y座標計算
    変換結果 = 座標変換(数学的X, 数学的Y)
    画面X = 変換結果[0]
    画面Y = 変換結果[1]
    五芒星(画面X, 画面Y, 星半径)

    # 関数名を画面の左下に表示
    関数名 = 関数名取得()
    「24px sans-serif」に描画フォント設定
    白色に塗り色設定
    [10, 460]に関数名を文字描画。

    # 星の座標を画面の左下に表示
    数学的X整数 = 数学的Xを整数変換
    数学的Y整数 = 数学的Yを整数変換
    座標テキスト = "星の座標（" & 数学的X整数 & " , " & 数学的Y整数 & " )"
    [10, 490]に座標テキストを文字描画

    数学的X = 数学的X + 5  # 数学的Xを増加させる

    # グローバル関数番号のチェックと更新
    もし 数学的X >= 300 ならば
        数学的X = -300
        グローバル関数番号 = グローバル関数番号 + 1
        もし グローバル関数番号 > 10 ならば
            グローバル関数番号 = 1
        ここまで
    ここまで
ここまで

# メインループ関数
●メインループとは
    # 現在の日時を取得
    現在日時 = 「Date.now()」をJS実行
    経過時間 = 現在日時 - 前回日時
    経過レート = 経過時間 / 20.0

    # 画面をクリア
    黒色に塗色設定
    [0, 0, 600, 500]に四角描画

    # X軸とY軸の描画
    軸描画

    # 星の更新
    星更新

    # スコア表示
    「24px sans-serif」に描画フォント設定
    白色に塗り色設定
    スコアテキスト = "Score=" & スコア
    [10, 30]にスコアテキストを文字描画

    # クリックした地点に＋マークを描く
    もし、BulletActivate = 1ならば
        白色に線色設定
        [クリック地点X - 10, クリック地点Y]から[クリック地点X + 10, クリック地点Y]まで線描画
        [クリック地点X, クリック地点Y - 10]から[クリック地点X, クリック地点Y + 10]まで線描画
    ここまで

    # 弾の更新
    もし、BulletActivate = 1ならば
        # 正8角形の描画と縮小
        角度 = 弾回転角度
        頂点 = []
        8回繰り返す
            頂点X = クリックX + 弾半径 * COS(角度)
            頂点Y = クリックY + 弾半径 * SIN(角度)
            頂点に[頂点X, 頂点Y]を追加
            角度 = 角度 + 45
        ここまで

        # 頂点を結んで描画
        赤色に線色設定
        I = 0
        7回繰り返す
            [頂点[I][0], 頂点[I][1]]から[頂点[I + 1][0], 頂点[I + 1][1]]まで線描画
            I = I + 1
        ここまで
        [頂点[7][0], 項点[7][1]]から[頂点[0][0], 頂点[0][1]]まで線描画

        弾半径 = 弾半径 - 6
        弾回転角度 = 弾回転角度 + 0.06

        もし、弾半径 <= 0ならば
            # 当たり判定
            当たり判定()
            BulletActivate = 0
            クリック地点X = 0
            クリック地点Y = 0
        ここまで
    ここまで

    # ヒットメッセージ表示
    もし ヒットフレーム > 0 ならば
        「24px sans-serif」に描画フォント設定
        白色に塗り色設定
        [ヒットX, ヒットY]に「Nice Hit!!」を文字描画
        ヒットY = ヒットY + 2
        ヒットフレーム = ヒットフレーム - 1
    ここまで

    # 前回日時を更新
    前回日時 = 現在日時

    # 次のフレームの実行を予約
    もし、描画中ならば
        「メインループ」を画面更新時実行
    ここまで
ここまで

# クリックイベントの設定
描画中キャンバスをマウス押した時には
    もし、BulletActivate = 0ならば
        BulletActivate = 1
        クリックX = マウスX
        クリックY = マウスY
        クリック地点X = クリックX
        クリック地点Y = クリックY
        弾半径 = 200
        弾回転角度 = 0
    ここまで
ここまで

# メインループの開始
描画中はオン
前回日時 = 「Date.now()」をJS実行
「メインループ」を画面更新時実行
